<welcome-file-list>
	<welcome-file>Login.html</welcome-file> 
</welcome-file-list>


Servlet -- controller -- logic 


how to create servlet ?? 

which jar we required for servlet? 
servlet-api.jar 
tomcat/lib 

1) class extends HttpServlet 
2) public void service(HttpServletRequest,HttpServletResponse) 
3) register and map our servlet in web.xml 
-----------------------------------------------------------
jsp => html + java 


jsp -> default -> html 

jsp -> java 
	1) java code 
		scriptlet <%  %>
	2) java - print 
		expression <%=name %> 
		
--------------------------------------------------------------
life cycle :- 

5 steps 

load class 
create instance 
call init() -----once 
call service() ----allTheTime 
call destroy() -----once



if i make 300 request then 

how many objects of servlet will created __1__? [ thread]  
how many times init call __1___?
how many times service call __300___?
how many times destroy call __1___?

--------------------------------------------------------------
		
jsp/servlet --> configuration

1)xml 
2)annotation 

-----------------------------------------------
Take username and basic salary from user. 

calculate total salary and print on browser. 

username : [ ram ] 
BS       : [ 20000 ] 
 submit 

user => username / basic salary

output 1)

username : ram 
BS 	 : 20000
bonus    : 2000+
pf       : 2400- 
TotalSal : 19600/- 

output 2)
	Please Enter Username 
	Please Enter BS

-----------------------------------------------


validation 
required --> 
regEx --> pattern 

XXXX@XXX.XX    ^[a-zA-Z0-9]+@[a-zA-Z0-9]+\.[a-zA-Z]{2,3}$ 

String emailRegEx = ""; 
// . => single character 
// + => 1 or many 


-----------------------------------------------
		
open mysql command line 

create database 21advjava; 

use 21advjava; 

create table student(
	studentId integer primary key auto_increment,
	firstName varchar(30),
	email varchar(30),
	password varchar(30)
);
	
		
-----------------------------------------------
		
create table products (
	productId integer primary key auto_increment,
	name varchar(30),
	price float,
	qty integer
);
		
-----------------------------------------------

filter -> incoming request 


user ---> request ------>  filter |---> server 



pakistan -> reject  

whatsapp --> send pic ---> 27mb --> compress ---> 15mb ---> whatsapp server --> poojan 
 
whatsapp --> send msg ---> Hi --> encrypt ---> DSSD ---> whatsapp server --> DSSD ---> decrypt---> poojan 


1) create class and implements Filter interface [ javax.servlet.Filter ] 
2) override all the methods  [ init doFilter{logic} destroy ] 
3) map your filter with servlet in web.xml 

-----------------------------------------------

how facebook or any other webapp identify the user? 
if you place an order it will add in your order but not other user's order ? 


webapplications uses session to store user's information. 

when user logged in into app one unique id is store into session. 

----------------------------------------------------------------------------

User will login with any username and password. 
once user login you need to track his/her activities.

after login user will redirect to SessionHome.jsp where 5 products are display and user 
can buy product. 


you need to maintain order of user's.
user can view their orders using view my orders link on home page. 

user can access their orders only 
----------------------------------------------------------------------------
session --> session is an object of HttpSession , which created by server in server's memory. 
 		--> to store user's info 
 		
 		
 		
 user info 
 1) session -- server side --server memory -- every user will get session  
 2) cookie --- client side -- browser 


how to access session ?
HttpSession session = request.getSession();


How To set data into session ?
session.setAttribute("key","value");

How to destroy session?
session.invalidate();



how to destroy session automatically when user is inactive or left the site? 

1) programming    : seconds 
2) configuration  : minutes 

----------------------------------------------------------------------------
listener:- 
			listen some events 
			server start --> google api connection open 
			server stop --> google api connection close
			
			session create --> total online users => counter++
			session destroy --> total online users => counter-- 
			
			request --> setAttribute --> 
			...................

1) class -> implements XXXListener 
2) override -> method 
3) configuration ->web.xml -> map
						

----------------------------------------------------------------------------
session --> server side --> secure --> costly --> 
cookie -->  client side --> browser --> 
----------------------------------------------------------------------------
take cookie name and cookie value from user and store it. 
also add 1 jsp that prints all cookie name and values 
----------------------------------------------------------------------------
headers -> 
	request headers --> client[browser][user] --> server -> hidden information 
	response headers --> server --> client[browser] --> information  
	
	js disable ?
	image ? 
	os ?
	browser ?
	lang ? 
----------------------------------------------------------------------------
	make 1 jsp page -->  HeaderWelcome.jsp 
	above jsp will print welcome message and current time  [ HH:MM:SS ] 
	also refresh jsp in every 20 seconds [ user will not referesh it will auto. ] 
	
----------------------------------------------------------------------------
	
html --> a  b h1 

custom tag -> <time> -> print time 
jstl --> java standard tag library 		
		
		jstl ->
		
		1) formatting
		2) xml
		3) sql 
		4) core# 
		5) function 
		
		1) download jstl-1.2.jar
		2) link jar - project 
		3) import required tag in your jsp using taglib directive 
		
----------------------------------------------------------------------------
		
jsp --> java servlet page  , java server page 

jsp -> servlet --> 

life cycle :- 

A.jsp 

1) translation   A.jsp --> A.java 
2) compilation   A.java --> A.class 
3) load class 
4) instance
5) init()   -- jspInit() 
6) service  --  _jspService() 
7) destroy() -- jspDestroy() 

----------------------------------------------------------------------------
9 implicit object => 

 		page 
 		pageContext#
 		out 
 		config 
 		request
 		response
 		session
 		application
 		exception*

----------------------------------------------------------------------------
reusable web component :- 
	inclusion
		
		
InclusionHome.jsp 

eComm :- header 
	home page content 
contactUs :- footer 


InclusionProduct.jsp 

eCom :- header 
	Product content 
footer 
	
----------------------------------------------------------------------------

































	
		
		
		
		
		
		
		